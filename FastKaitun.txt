
local environment, replicatedstorage, players, net, client, modulepath, characterfolder, enemyfolder do
	environment = (getgenv or getrenv or getfenv)()
	replicatedstorage = game:GetService("ReplicatedStorage")
	players = game:GetService("Players")
	client = players.LocalPlayer
	modulepath = replicatedstorage:WaitForChild("Modules")
	net = modulepath:WaitForChild("Net")
	characterfolder = workspace:WaitForChild("Characters")
	enemyfolder = workspace:WaitForChild("Enemies")
end

local Module = {}
Module.AttackCooldown = .0
local CachedChars = {}

function Module.IsAlive(Char: Model?): boolean
	if not Char then
		return nil
	end

	if CachedChars[Char] then
		return CachedChars[Char].Health > 0
	end

	local Hum = Char:FindFirstChildOfClass("Humanoid")
	CachedChars[Char] = Hum
	return Hum and Hum.Health > 0
end

local Settings = {
	ClickDelay = 0.1
	AutoClick = true
}

Module.FastAttack = (function()
	if environment._trash_attack then
		return environment._trash_attack
	end
	local module = {
		NextAttack = 0,
		Distance = 100,
		attackMobs = _G.AttackMob,
		attackPlayers = _G.AttackPlayer
	}
	local RegisterAttack = net:WaitForChild("RE/RegisterAttack")
	local RegisterHit = net:WaitForChild("RE/RegisterHit")
	function module:AttackEnemy(EnemyHead, Table)
		if EnemyHead and client:DistanceFromCharacter(EnemyHead.Position) < self.Distance then
			if not self.FirstAttack then
				RegisterAttack:FireServer(.0)
				self.FirstAttack = true
			end
			RegisterHit:FireServer(EnemyHead, Table or {})
		end
	end
	function module:AttackNearest()
		local args = {
			[1] = nil,
			[2] = {}
		}
		for _, Enemy in enemyfolder:GetChildren() do
			local HRP = Enemy:FindFirstChild("HumanoidRootPart", true)
			if HRP and client:DistanceFromCharacter(HRP.Position) < self.Distance then
				if not args[1] then
					args[1] = Enemy:FindFirstChild("UpperTorso")
				else
					table.insert(args[2], {
						[1] = Enemy,
						[2] = Enemy:FindFirstChild("UpperTorso")
					})
				end
			end
		end
		self:AttackEnemy(unpack(args))
		for _, Enemy in characterfolder:GetChildren() do
			if Enemy ~= client.Character then
				self:AttackEnemy(Enemy:FindFirstChild("UpperTorso"))
			end
		end
		if not self.FirstAttack then
			task.wait(.0)
		end
	end
	function module:BladeHits()
		self:AttackNearest()
		self.FirstAttack = false
	end
	task.spawn(function()
		while game:GetService("RunService").Stepped:Wait() do
			if (tick() - Module.AttackCooldown) < 0 then continue end
			if not Settings.AutoClick then continue end
			if not Module.IsAlive(client.Character) then continue end
			if not client.Character:FindFirstChildOfClass("Tool") then continue end
			module:BladeHits()
		end
	end)
	environment._trash_attack = module
	return module
end)()

local RS = game:GetService("ReplicatedStorage")
local regAtk = RS.Modules.Net:FindFirstChild("RE/RegisterAttack")
local regHit = RS.Modules.Net:FindFirstChild("RE/RegisterHit")

local function zXy9(player)
	local lst = {}
	for _, obj in pairs(workspace.Characters:GetChildren()) do
		if obj ~= player.Character and obj:FindFirstChild("HumanoidRootPart") and player:DistanceFromCharacter(obj.HumanoidRootPart.Position) < 200 then
			table.insert(lst, {obj, obj.HumanoidRootPart})
		end
	end

	for _, obj2 in pairs(workspace.Enemies:GetChildren()) do
		if obj2:FindFirstChild("HumanoidRootPart") and player:DistanceFromCharacter(obj2.HumanoidRootPart.Position) < 200 then
			table.insert(lst, {obj2, obj2.HumanoidRootPart})
		end
	end

	return lst
end

local yZn34 = false
task.spawn(function()
	while true do
		if Xz12 then
			yZn34 = true
			wait(0.1)
        else
		else
			yZn34 = false
			wait(0.5)
		end
		if Xz12 then
			local cLst = zXy9(game.Players.LocalPlayer)
			if #cLst > 0 then
				regAtk:FireServer(0.4)
				for _, tgt in next, cLst do
					regHit:FireServer(cLst[_][2], cLst)
				end
			end
		end
	end
end)
Xz12 = true
getgenv().FastAttack = true
task.spawn(function()
	while true do
		task.wait(0.1)
		pcall(function()
			if getgenv().FastAttack then
				for i, v in next, workspace.Enemies:GetChildren() do
					if v.Humanoid.Health > 0 and v:FindFirstChild("HumanoidRootPart") and 
						(v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= tonumber(60) then

						game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterAttack"):FireServer(0)

						local args = {
							[1] = v:FindFirstChild("RightHand"),
							[2] = {}
						}

						for _, e in next, workspace:WaitForChild("Enemies"):GetChildren() do
							if e:FindFirstChild("Humanoid") and e.Humanoid.Health > 0 then
								table.insert(args[2], {
									[1] = e,
									[2] = e:FindFirstChild("HumanoidRootPart") or e:FindFirstChildOfClass("BasePart")
								})
							end
						end

						game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/RegisterHit"):FireServer(unpack(args))
					end
				end
			end
		end)
	end
end)

local environment, replicatedstorage, players, net, client, modulepath, characterfolder, enemyfolder do
	environment = (getgenv or getrenv or getfenv)()
	replicatedstorage = game:GetService("ReplicatedStorage")
	players = game:GetService("Players")
	client = players.LocalPlayer
	modulepath = replicatedstorage:WaitForChild("Modules")
	net = modulepath:WaitForChild("Net")
	characterfolder = workspace:WaitForChild("Characters")
	enemyfolder = workspace:WaitForChild("Enemies")
end

local Module = {}
Module.AttackCooldown = .0
local CachedChars = {}

function Module.IsAlive(Char: Model?): boolean
	if not Char then
		return nil
	end

	if CachedChars[Char] then
		return CachedChars[Char].Health > 0
	end

	local Hum = Char:FindFirstChildOfClass("Humanoid")
	CachedChars[Char] = Hum
	return Hum and Hum.Health > 0
end

local Settings = {
	ClickDelay = _G.AntiCheat["Multiple Hit"],
	AutoClick = true
}
Module.FastAttack = (function()
	if environment._trash_attack then
		return environment._trash_attack
	end
	local module = {
		NextAttack = 0,
		Distance = 100,
		attackMobs = _G.AttackMob,
		attackPlayers = _G.AttackPlayer
	}
	local RegisterAttack = net:WaitForChild("RE/RegisterAttack")
	local RegisterHit = net:WaitForChild("RE/RegisterHit")
	function module:AttackEnemy(EnemyHead, Table)
		if EnemyHead and client:DistanceFromCharacter(EnemyHead.Position) < self.Distance then
			if not self.FirstAttack then
				RegisterAttack:FireServer(.0)
				self.FirstAttack = true
			end
			RegisterHit:FireServer(EnemyHead, Table or {})
		end
	end
	function module:AttackNearest()
		local args = {
			[1] = nil,
			[2] = {}
		}
		for _, Enemy in enemyfolder:GetChildren() do
			local HRP = Enemy:FindFirstChild("HumanoidRootPart", true)
			if HRP and client:DistanceFromCharacter(HRP.Position) < self.Distance then
				if not args[1] then
					args[1] = Enemy:FindFirstChild("UpperTorso")
				else
					table.insert(args[2], {
						[1] = Enemy,
						[2] = Enemy:FindFirstChild("UpperTorso")
					})
				end
			end
		end
		self:AttackEnemy(unpack(args))
		for _, Enemy in characterfolder:GetChildren() do
			if Enemy ~= client.Character then
				self:AttackEnemy(Enemy:FindFirstChild("UpperTorso"))
			end
		end
		if not self.FirstAttack then
			task.wait(0.1)
		end
	end
	function module:BladeHits()
		self:AttackNearest()
		self.FirstAttack = false
	end
	task.spawn(function()
		while game:GetService("RunService").Stepped:Wait() do
			if (tick() - Module.AttackCooldown) < 0 then continue end
			if not Settings.AutoClick then continue end
			if not Module.IsAlive(client.Character) then continue end
			if not client.Character:FindFirstChildOfClass("Tool") then continue end
			module:BladeHits()
		end
	end)
	environment._trash_attack = module
	return module
end)()

function Click()
	game:GetService("VirtualUser"):CaptureController()
	game:GetService("VirtualUser"):Button1Down(Vector2.new(1280, 672))
end
function AttackPlayers()
	game:GetService("VirtualUser"):CaptureController()
	game:GetService("VirtualUser"):Button1Down(Vector2.new(1280, 672))
end